``1-my_list``module
===================

Test cases for 1-my_list

Using ``MyList``
_______________

Importing ``MyList`` from ``1-my_list``:

	 >>> MyList = __import__('1-my_list').MyList

Using it:

	 >>> l1 = MyList()
	 >>> type(l1)
	 <class '1-my_list.MyList'>

	 >>> print(l1)
	 []

Class inheriting from list

      	 >>> issubclass(MyList, list)
	 True

Class only defining one extra function compared

      	 >>> 'print_sorted' in dir(MyList)
	 True

	 >>> l2 = [3, 7, 0, 1, 6]
	 >>> l2.print_sorted()
	 Traceback (most recent call last):
	 AttributeError: 'list' object has no attribute 'print_sorted'

Assuming all elements of a list will be integers

	 >>> def test_i(tests=[]):
	 ...  for test in tests:
	 ...	try:
	 ...	       test.print_sorted()
	 ...    except Exception as e:
	 ...	       print("[{}] {}".format(e.__class__.__name__, e))
	 ...

	 >>> tests = [MyList([1, "a"]), MyList(["a", "b", "c"]), None, MyList([[1], [2]]), MyList([1, -1, 3.4])]

	 >>> test_i(tests)
	 [TypeError] unorderable types: str() < int()
	 ['a', 'b', 'c']
	 [AttributeError] 'NoneType' object has no attribute 'print_sorted'
	 [[1], [2]]
	 [-1, 1, 3.4]


``print_sorted`` prints the elements in sorted order without changing the actual order of the list.

	>>> l1.print_sorted()
	[]

Printing with negative numbers

	 >>> l4 = MyList([-2513461346364, -1285720873193, 0, -345662577682686554, 1])
	 >>> l4
	 [-2513461346364, -1285720873193, 0, -345662577682686554, 1]

	 >>> l4.print_sorted()
	 [-345662577682686554, -2513461346364, -1285720873193, 0, 1]

	 >>> l4
	 [-2513461346364, -1285720873193, 0, -345662577682686554, 1]
